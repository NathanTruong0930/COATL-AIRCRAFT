#include <SPI.h>
#include <WiFi.h>
#include <WebServer.h>

// === WiFi ===
const char* ssid = "Etherium";
const char* password = "ladylink";
WebServer server(80);

// === Pins ===
#define GAIN1_PIN 18
#define GAIN2_PIN 17
#define GAIN3_PIN 9
#define CS_PIN     8
#define SPI_SCK    36
#define SPI_MOSI   35
#define SPI_MISO   37

// === Constants ===
#define V_REF       4.098
#define MAX_ADC     16383
#define FEEDBACK_CAP 1e-10
#define GAIN_1_MULTIPLIER 3.9
#define GAIN_2_MULTIPLIER 15.0
#define GAIN_3_MULTIPLIER 47.0
#define ADC_RANGE_BYTE    0b10000100
#define MODE_CONTROL_BYTE 0b10000000

// Thresholds in gain 1 terms
#define R3_MIN 7738
#define R3_MAX 8645
#define R2_MIN_NEG 6770
#define R2_MAX_NEG 7737
#define R2_MIN_POS 8646
#define R2_MAX_POS 9613
#define GAIN2_TO_GAIN3_MIN 6447
#define GAIN2_TO_GAIN3_MAX 9936

/// === Globals ===
bool manualGain = true;  // Force manual gain for physical testing
int activeGain = 1;
uint16_t adcRaw = 0;
float voltage = 0.0, charge = 0.0;
String gainLabel = "Gain 1 (3.9x)";
String chargeStr = "";
String chargeSign = "";
float testVoltage = 4.5;
bool testMode = false;  // <-- Disable test mode for physical testing
bool clippingWarning = false;

// === Serial Log ===
constexpr uint16_t LOG_DEPTH = 120;
String logBuf[LOG_DEPTH];
uint16_t logHead = 0;

void addLogLine(const String& ln) {
  logBuf[logHead] = ln;
  logHead = (logHead + 1) % LOG_DEPTH;
}

void handleLog() {
  String out;
  for (uint16_t i = 0; i < LOG_DEPTH; ++i) {
    uint16_t idx = (logHead + i) % LOG_DEPTH;
    if (logBuf[idx].length()) out += logBuf[idx] + "\n";
  }
  server.send(200, "text/plain", out);
}

void setGain(int g) {
  digitalWrite(GAIN1_PIN, LOW);
  digitalWrite(GAIN2_PIN, LOW);
  digitalWrite(GAIN3_PIN, LOW);
  delayMicroseconds(1);
  if (g == 1) digitalWrite(GAIN1_PIN, HIGH);
  else if (g == 2) digitalWrite(GAIN2_PIN, HIGH);
  else if (g == 3) digitalWrite(GAIN3_PIN, HIGH);
  activeGain = g;
  gainLabel = (g == 1) ? "Gain 1 (3.9x)" : (g == 2) ? "Gain 2 (15x)" : "Gain 3 (47x)";
}

void configureADC() {
  digitalWrite(CS_PIN, LOW);
  SPI.transfer(MODE_CONTROL_BYTE);
  digitalWrite(CS_PIN, HIGH);
  delayMicroseconds(10);
  digitalWrite(CS_PIN, LOW);
  SPI.transfer(ADC_RANGE_BYTE);
  digitalWrite(CS_PIN, HIGH);
  delayMicroseconds(100);
}

uint16_t readMAX1032() {
  uint8_t r[3] = {0};
  SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
  digitalWrite(CS_PIN, LOW);
  SPI.transfer(MODE_CONTROL_BYTE);
  r[0] = SPI.transfer(0x00);
  r[1] = SPI.transfer(0x00);
  r[2] = SPI.transfer(0x00);
  digitalWrite(CS_PIN, HIGH);
  SPI.endTransaction();
  return (((r[1] << 8) | r[2]) >> 2) & 0x3FFF;
}

void calculateDerivedValues() {
  // === Step 1: Reset to Gain 1 unless in manual mode
  if (!manualGain) {
    setGain(1);
    delayMicroseconds(1);
  }

  // === Step 2: Read initial ADC value
  adcRaw = readMAX1032();

  /*
  // === Step 3: Auto gain switching (DISABLED for physical testing)
  if (!manualGain && !testMode) {
    if ((adcRaw >= R2_MIN_NEG && adcRaw <= R2_MAX_NEG) || 
        (adcRaw >= R2_MIN_POS && adcRaw <= R2_MAX_POS)) {
      setGain(2);
      delayMicroseconds(1);
      adcRaw = readMAX1032();
      if (adcRaw >= GAIN2_TO_GAIN3_MIN && adcRaw <= GAIN2_TO_GAIN3_MAX) {
        setGain(3);
        delayMicroseconds(1);
        adcRaw = readMAX1032();
      }
    } else if (adcRaw >= R3_MIN && adcRaw <= R3_MAX) {
      setGain(3);
      delayMicroseconds(1);
      adcRaw = readMAX1032();
    }
  }
  */

  // === Step 4: Simulate ADC value (skipped – testMode is false)

  // === Step 5: Calculate voltage and charge
  float voltageGain = ((adcRaw / 16383.0) - 0.5) * (3 * V_REF);
  float gainFactor = (activeGain == 1) ? GAIN_1_MULTIPLIER :
                     (activeGain == 2) ? GAIN_2_MULTIPLIER : GAIN_3_MULTIPLIER;
  charge = (voltageGain / gainFactor) * FEEDBACK_CAP;
  chargeSign = (voltageGain >= 0) ? "+" : "-";

  float absCharge = abs(charge);
  chargeStr = (absCharge >= 1e-12)
    ? chargeSign + String(absCharge * 1e12, 4) + " pC"
    : chargeSign + String(absCharge * 1e15, 4) + " fC";

  voltage = voltageGain;
  clippingWarning = (voltage > 4.75);

  // === Step 6: Log output
  String log = "ADC Bits: " + String(adcRaw) +
               " | Voltage: " + String(voltage, 4) + " V" +
               " | Charge: " + chargeStr +
               " | Gain: " + gainLabel;
  Serial.println(log);
  addLogLine(log);

  // === Step 7: Reset to Gain 1 for next cycle (auto mode only)
  if (!manualGain) setGain(1);
}



String particleEstimate(float q, String t) {
  float minS, maxS;
  if (t == "Volcanic Ash") { minS = 1e-6; maxS = 1e-5; }
  else if (t == "Wildfire Smoke") { minS = 1e-8; maxS = 1e-6; }
  else if (t == "Mineral Dust") { minS = 7.7e-7; maxS = 2.34e-6; }
  else return "";
  float dMin = 2 * sqrt(abs(q) / (4 * PI * maxS));
  float dMax = 2 * sqrt(abs(q) / (4 * PI * minS));
  return String(t) + ": " + String(dMin * 1e6, 2) + "–" + String(dMax * 1e6, 2) + " µm";
}

void handleMain() {
  calculateDerivedValues();
  String page = "<!DOCTYPE html><html><head><title>Dust Analyzer</title>";
  page += "<meta name='viewport' content='width=device-width, initial-scale=1.0'>";
  page += "<style>";
  page += "body{margin:0;padding:0;font-family:monospace;background:#A1A6A8;";
  page += "background-image:url('https://github.com/NathanTruong0930/COATL-AIRCRAFT/blob/main/Code/Volcano2.png?raw=true');";
  page += "background-repeat:no-repeat;background-position:center top;background-size:contain;height:auto;min-height:100vh;overflow-y:scroll;}";
  page += "#dashboard{position:absolute;top:60vh;left:50%;transform:translateX(-50%);background-color:transparent;padding:1vh;text-align:center;width:90vw;max-width:450px;font-size:2vh;}";
  page += "h1{font-size:3vh;margin:0.5vh 0;}p{font-size:2vh;margin:1vh 0;}button{font-family:monospace;background-color:#E87749;color:black;padding:1vh 2vh;border:none;cursor:pointer;font-size:2vh;margin-top:2vh;}";
  page += "</style>";
  page += "<script>";
  page += "function updateSummary(){fetch('/summary').then(r=>r.text()).then(t=>{document.getElementById('summary').innerHTML=t;});}";
  page += "setInterval(updateSummary,1000);window.onload=updateSummary;";
  page += "</script></head><body>";
  page += "<div id='dashboard'><h1>Electrostatic Dust Analyzer</h1>";
  page += "<div id='summary'></div>";
  page += "<form action='/details'><button>Technical Details</button></form></div></body></html>";
  server.send(200, "text/html", page);
}


void handleDetails() {
  calculateDerivedValues();
  String page = "<html><head><meta charset='UTF-8'><title>Details</title>";
  page += "<meta name='viewport' content='width=device-width, initial-scale=1.0'>";
  page += "<style>body{background:#A1A6A8;color:black;font-family:monospace;padding:20px;}button{background:#E87749;color:black;font-family:monospace;padding:10px;border:none;cursor:pointer;}";
  page += ".radio-group{display:flex;gap:10px;margin-top:10px;}input[type=radio]{display:none;}label{padding:6px 12px;border:1px solid black;border-radius:5px;cursor:pointer;}input[type=radio]:checked+label{background:#E87749;color:black;}</style>";
  page += "<script>function upd(){fetch('/log').then(r=>r.text()).then(t=>{let p=document.getElementById('log');p.textContent=t;p.scrollTop=p.scrollHeight;});}setInterval(upd,1000);window.onload=upd;</script></head><body>";
  page += "<a href='/' style='text-decoration:none;color:black;font-weight:bold;font-size:18px;'>&#8592; Main Page</a>";
  page += "<h2>Technical Details</h2><p><b>Charge:</b> " + chargeStr + "</p>";
  page += "<p><b>Voltage:</b> " + String(voltage, 4) + " V</p>";
  page += "<p><b>ADC Bits:</b> " + String(adcRaw) + "</p>";
  page += "<p><b>Gain Stage:</b> " + gainLabel + "</p>";
  if (clippingWarning) page += "<p style='color:red'><b>⚠️ Clipping risk!</b></p>";
  page += "<form method='POST' action='/toggleGain'><button>Toggle " + String(manualGain ? "Auto" : "Manual") + " Gain</button></form>";

  if (manualGain) {
    page += "<form method='POST' action='/selectGain'><div class='radio-group'>";
    for (int g = 1; g <= 3; g++) {
      String val = "gain" + String(g);
      String checked = (activeGain == g) ? "checked" : "";
      String label = (g == 1) ? "Gain 1 (3.9x)" : (g == 2) ? "Gain 2 (15x)" : "Gain 3 (47x)";
      page += "<input type='radio' id='" + val + "' name='gain' value='" + String(g) + "' " + checked + ">";
      page += "<label for='" + val + "'>" + label + "</label>";
    }
    page += "</div><button>Apply Gain</button></form>";
  }

  page += "<h3>Serial Monitor</h3><pre id='log' style='background:#000;color:#0f0;padding:8px;height:300px;overflow-y:scroll;font-family:monospace;'></pre>";
  page += "</body></html>";
  server.send(200, "text/html", page);
}

void handleToggleGain() {
  manualGain = !manualGain;
  if (!manualGain) setGain(1);
  server.sendHeader("Location", "/details");
  server.send(303);
}

void handleSelectGain() {
  if (server.hasArg("gain")) {
    int g = server.arg("gain").toInt();
    if (g >= 1 && g <= 3) setGain(g);
  }
  server.sendHeader("Location", "/details");
  server.send(303);
}

void handleSummary() {
  String summary = 
    "<p><b>Charge:</b> " + chargeStr + "</p>" +
    "<p><b>Particle Size Estimates:</b></p>" +
    "<p>" + particleEstimate(charge, "Volcanic Ash") + "</p>" +
    "<p>" + particleEstimate(charge, "Wildfire Smoke") + "</p>" +
    "<p>" + particleEstimate(charge, "Mineral Dust") + "</p>";
  server.send(200, "text/html", summary);
}

void setup() {
  Serial.begin(115200);
  pinMode(CS_PIN, OUTPUT); digitalWrite(CS_PIN, HIGH);
  pinMode(GAIN1_PIN, OUTPUT); pinMode(GAIN2_PIN, OUTPUT); pinMode(GAIN3_PIN, OUTPUT);
  setGain(1);
  SPI.begin(SPI_SCK, SPI_MISO, SPI_MOSI);
  configureADC();

  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) { delay(500); Serial.print("."); }
  Serial.println("\nWiFi connected. IP: " + WiFi.localIP().toString());

  server.on("/", handleMain);
  server.on("/summary", handleSummary);
  server.on("/details", handleDetails);
  server.on("/log", handleLog);
  server.on("/toggleGain", HTTP_POST, handleToggleGain);
  server.on("/selectGain", HTTP_POST, handleSelectGain);
  server.begin();
}

void loop() {
  server.handleClient();

  // Skip test voltage updates since testMode is false
  /*
  if (testMode && Serial.available()) {
    String input = Serial.readStringUntil('\n');
    input.trim();
    float entered = input.toFloat();
    if (entered >= 0.0 && entered <= (3 * V_REF)) {
      testVoltage = entered;
      Serial.println("Simulated input: " + String(testVoltage));
      addLogLine("Manual input: " + String(testVoltage));
    }
  }
  */
}

