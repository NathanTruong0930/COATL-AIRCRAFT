#include <SPI.h>

// ADG212 control pins
#define ROUTE1_PIN 9    // IN1 → 39k
#define ROUTE2_PIN 8   // IN2 → 150k
#define ROUTE3_PIN 7   // IN4 → 470k

// MAX1032 SPI configuration
#define CS_PIN     17
#define SPI_SCK    36
#define SPI_MOSI   35
#define SPI_MISO   37

// ADC settings
#define V_REF             4.098
#define ADC_RANGE_BYTE    0b10000100
#define MODE_CONTROL_BYTE 0b10000000

// Route tracking
int currentRoute = 1;
unsigned long lastRouteSwitch = 0;
unsigned long lastADCRead = 0;

void setup() {
  Serial.begin(115200);

  // Setup route control pins
  pinMode(ROUTE1_PIN, OUTPUT);
  pinMode(ROUTE2_PIN, OUTPUT);
  pinMode(ROUTE3_PIN, OUTPUT);

  // Default all off, then activate route1
  disableAllRoutes();
  enableRoute(1);

  // SPI init
  pinMode(CS_PIN, OUTPUT);
  digitalWrite(CS_PIN, HIGH);
  SPI.begin(SPI_SCK, SPI_MISO, SPI_MOSI);
  SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));

  configureADC();
  Serial.println("System ready: 3-route ADG212 + ADC active.");
}

void loop() {
  unsigned long now = millis();

  // Switch routes every 5 seconds
  if (now - lastRouteSwitch >= 20000) {
    currentRoute++;
    if (currentRoute > 3) currentRoute = 1;

    disableAllRoutes();
    enableRoute(currentRoute);

    Serial.print("Switched to ROUTE ");
    Serial.println(currentRoute);

    lastRouteSwitch = now;
  }

  // Read ADC every 1 second
  if (now - lastADCRead >= 1000) {
    uint16_t adcRaw = readMAX1032();
    float voltage = ((adcRaw / 16383.0) - 0.5) * (3 * V_REF);

    Serial.print("ADC Raw: "); Serial.print(adcRaw);
    Serial.print(" | Voltage: "); Serial.print(voltage, 4);
    Serial.print(" V | Active Route: "); Serial.println(currentRoute);

    lastADCRead = now;
  }
}

// Enables only the selected route
void enableRoute(int route) {
  digitalWrite(ROUTE1_PIN, route == 1 ? HIGH : LOW);
  digitalWrite(ROUTE2_PIN, route == 2 ? HIGH : LOW);
  digitalWrite(ROUTE3_PIN, route == 3 ? HIGH : LOW);
}

// Disables all routes
void disableAllRoutes() {
  digitalWrite(ROUTE1_PIN, LOW);
  digitalWrite(ROUTE2_PIN, LOW);
  digitalWrite(ROUTE3_PIN, LOW);
}

// MAX1032 ADC configuration
void configureADC() {
  digitalWrite(CS_PIN, LOW);
  SPI.transfer(MODE_CONTROL_BYTE);
  digitalWrite(CS_PIN, HIGH);
  delayMicroseconds(10);

  digitalWrite(CS_PIN, LOW);
  SPI.transfer(ADC_RANGE_BYTE);
  digitalWrite(CS_PIN, HIGH);
  delayMicroseconds(100);
}

// MAX1032 ADC read
uint16_t readMAX1032() {
  uint8_t response[3] = {0};

  digitalWrite(CS_PIN, LOW);
  SPI.transfer(MODE_CONTROL_BYTE);
  response[0] = SPI.transfer(0x00);  // dummy
  response[1] = SPI.transfer(0x00);  // MSB
  response[2] = SPI.transfer(0x00);  // LSB
  digitalWrite(CS_PIN, HIGH);

  return (((response[1] << 8) | response[2]) >> 2) & 0x3FFF;
}
