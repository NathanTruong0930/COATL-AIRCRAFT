#include <SPI.h>

// Pins definition
#define CS_PIN        A2
#define SPI_SCK       36
#define SPI_MOSI      35
#define SPI_MISO      37

// ADC parameters
#define V_REF          4.096
#define ADC_RANGE_BYTE 0b10000110  // Single-ended, 3Ã—V_REF (12.288 V max)
#define MODE_CONTROL_BYTE 0b10000000 // Single-ended, CH0

void setup() {
  Serial.begin(115200);
  SPI.begin(SPI_SCK, SPI_MISO, SPI_MOSI);
  SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
  
  pinMode(CS_PIN, OUTPUT);
  digitalWrite(CS_PIN, HIGH);

  // Initial Configuration
  configureADC();
  Serial.println("MAX1032 ADC setup complete.");
}

void loop() {
  uint16_t adcRaw = readMAX1032();
  float measuredVoltage = (adcRaw / 16383.0) * (3 * V_REF);

  Serial.print("ADC Raw: "); Serial.print(adcRaw);
  Serial.print(" | Voltage: "); Serial.print(measuredVoltage, 4); Serial.println(" V");
  
  delay(1000);
}

// Proper ADC configuration following advisor's instructions
void configureADC() {
  // Set Mode Control Byte
  digitalWrite(CS_PIN, LOW);
  SPI.transfer(MODE_CONTROL_BYTE);
  digitalWrite(CS_PIN, HIGH);
  delayMicroseconds(10);

  // Set Analog Input Config Byte
  digitalWrite(CS_PIN, LOW);
  SPI.transfer(ADC_RANGE_BYTE);
  digitalWrite(CS_PIN, HIGH);
  delayMicroseconds(100);
}

// Corrected read function per advisor notes
uint16_t readMAX1032() {
  uint8_t response[2] = {0};

  digitalWrite(CS_PIN, LOW);
  SPI.transfer(MODE_CONTROL_BYTE);   // Conversion start byte for CH0
  response[0] = SPI.transfer(0x00);  // dummy clocks, data ignored
  response[1] = SPI.transfer(0x00);  // dummy clocks, data ignored
  response[2] = SPI.transfer(0x00);  // MSB received here
 // response[3] = SPI.transfer(0x00);  // LSB received here
  digitalWrite(CS_PIN, HIGH);

  // Combine last two bytes into 14-bit ADC value
  uint16_t result = (((response[1] << 8) | response[2]) >> 2) & 0x3FFF;

  return result;
}
