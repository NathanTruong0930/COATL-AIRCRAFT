#include <SPI.h>

// ADC SPI pin configuration for ESP32 Feather S3
#define CS_PIN         16
#define SPI_SCK        36
#define SPI_MOSI       35
#define SPI_MISO       37

// ADG212 gain switch pins
#define GAIN_X4_PIN    5
#define GAIN_X15_PIN   6
#define GAIN_X47_PIN   10

// ADC parameters
#define V_REF          4.098  // Use same reference voltage as in working code
#define ADC_RANGE_BYTE 0b10000110
#define MODE_CONTROL_BYTE 0b10000000

// Voltage thresholds
#define NEG_X4_MIN_V     5.5
#define NEG_X15_MIN_V    4.8
#define NEG_X47_MIN_V    4.5

#define POS_X4_MAX_V     3.5
#define POS_X15_MAX_V    4.2
#define POS_X47_MAX_V    4.499

int currentGain = 4;
float prevVoltage = 0.0;

void setup() {
  Serial.begin(115200);
  SPI.begin(SPI_SCK, SPI_MISO, SPI_MOSI);
  SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));

  pinMode(CS_PIN, OUTPUT);
  digitalWrite(CS_PIN, HIGH);

  pinMode(GAIN_X4_PIN, OUTPUT);
  pinMode(GAIN_X15_PIN, OUTPUT);
  pinMode(GAIN_X47_PIN, OUTPUT);

  setGain(4);  // Start with gain x4 by default
  configureADC();

  delay(200);
  Serial.println("ADC + Dynamic Gain Switching Initialized (Feather S3).");
}

void loop() {
  uint16_t adcRaw = readMAX1032();
  float measuredVoltage = (adcRaw / 16383.0) * (3 * V_REF);
  float actualVoltage = convertToActualVoltage(measuredVoltage, currentGain);

  bool isNegativeDirection = (actualVoltage < prevVoltage);
  prevVoltage = actualVoltage;

  directionBasedGainSwitch(actualVoltage, isNegativeDirection);

  Serial.print("ADC Raw: "); Serial.print(adcRaw);
  Serial.print(" | Measured Voltage: "); Serial.print(measuredVoltage, 4);
  Serial.print(" V | Actual Voltage: "); Serial.print(actualVoltage, 4);
  Serial.print(" V | Gain: x"); Serial.print(currentGain);
  Serial.print(" | Direction: "); Serial.println(isNegativeDirection ? "Negative" : "Positive");

  delay(1000);
}

// Match your verified ADC configuration
void configureADC() {
  digitalWrite(CS_PIN, LOW);
  SPI.transfer(MODE_CONTROL_BYTE);  // Send Mode-Control byte
  digitalWrite(CS_PIN, HIGH);
  delayMicroseconds(10);

  digitalWrite(CS_PIN, LOW);
  SPI.transfer(ADC_RANGE_BYTE);     // Send Analog-Input Config byte
  digitalWrite(CS_PIN, HIGH);
  delayMicroseconds(100);
}

// Updated read function based on working code
uint16_t readMAX1032() {
  uint8_t b1, b2, b3;

  digitalWrite(CS_PIN, LOW);
  SPI.transfer(MODE_CONTROL_BYTE);   // Start conversion
  b1 = SPI.transfer(0x00);           // dummy
  b2 = SPI.transfer(0x00);           // MSB
  b3 = SPI.transfer(0x00);           // LSB
  digitalWrite(CS_PIN, HIGH);

  uint16_t result = (((b2 << 8) | b3) >> 2) & 0x3FFF;
  return result;
}

// Gain control using ADG212 pins
void setGain(int gain) {
  currentGain = gain;
  digitalWrite(GAIN_X4_PIN, gain == 4 ? HIGH : LOW);
  digitalWrite(GAIN_X15_PIN, gain == 15 ? HIGH : LOW);
  digitalWrite(GAIN_X47_PIN, gain == 47 ? HIGH : LOW);
  Serial.print("Gain switched to x"); Serial.println(gain);
}

// Convert measured ADC voltage to real input voltage based on gain
float convertToActualVoltage(float measuredVoltage, int gain) {
  switch (gain) {
    case 4:  return measuredVoltage;
    case 15: return measuredVoltage / 0.2667;
    case 47: return measuredVoltage / 0.0851;
    default: return measuredVoltage;
  }
}

// Dynamic gain switching (based on direction & thresholds)
void directionBasedGainSwitch(float voltage, bool negativeDirection) {
  if (negativeDirection) {
    if (voltage >= NEG_X4_MIN_V && currentGain != 4) setGain(4);
    else if (voltage < NEG_X4_MIN_V && voltage >= NEG_X15_MIN_V && currentGain != 15) setGain(15);
    else if (voltage < NEG_X15_MIN_V && voltage >= NEG_X47_MIN_V && currentGain != 47) setGain(47);
  } else {
    if (voltage <= POS_X4_MAX_V && currentGain != 4) setGain(4);
    else if (voltage > POS_X4_MAX_V && voltage <= POS_X15_MAX_V && currentGain != 15) setGain(15);
    else if (voltage > POS_X15_MAX_V && voltage <= POS_X47_MAX_V && currentGain != 47) setGain(47);
  }
}
