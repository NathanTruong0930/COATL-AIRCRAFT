#include <SPI.h>
#include <WiFi.h>
#include <WebServer.h>

// === WiFi Configuration ===
const char* ssid = "EA";
const char* password = "123456Ee";

// === Web server on port 80 ===
WebServer server(80);

// ADG212 control pins
#define ROUTE1_PIN 18
#define ROUTE2_PIN 17
#define ROUTE3_PIN 9

// MAX1032 SPI configuration
#define CS_PIN     8
#define SPI_SCK    36
#define SPI_MOSI   35
#define SPI_MISO   37

// ADC settings
#define V_REF             4.098
#define ADC_RANGE_BYTE    0b10000100
#define MODE_CONTROL_BYTE 0b10000000

// Data tracking
int currentRoute = 1;
unsigned long lastRouteSwitch = 0;
unsigned long lastADCRead = 0;
uint16_t adcRaw = 0;
float voltage = 0.0;

// === Serial Monitor Web Log ===
constexpr uint16_t LOG_DEPTH = 120;  // Number of log lines
String logBuf[LOG_DEPTH];
uint16_t logHead = 0;

void addLogLine(const String& ln) {
  logBuf[logHead] = ln;
  logHead = (logHead + 1) % LOG_DEPTH;
}

void handleLog() {
  String out;
  for (uint16_t i = 0; i < LOG_DEPTH; ++i) {
    uint16_t idx = (logHead + i) % LOG_DEPTH;
    if (logBuf[idx].length()) out += logBuf[idx] + "\n";
  }
  server.send(200, "text/plain", out);
}

// === Web Page Handler ===
void handleRoot() {
  String html =
    "<html><head><title>EDA Monitor</title>"
    "<style>body{font-family:sans-serif;margin:20px}"
    "pre{background:#000;color:#0f0;padding:8px;height:300px;"
    "overflow-y:scroll;font-family:monospace;}"
    "</style>"
    "<script>"
    "function upd(){fetch('/log').then(r=>r.text()).then(t=>{"
    "let p=document.getElementById('log'); p.textContent=t;"
    "p.scrollTop=p.scrollHeight;});}"
    "setInterval(upd,1000); window.onload=upd;"
    "</script></head><body>"
    "<h2>Electrostatic Dust Analyzer Status</h2>"
    "<p><b>Active Route:</b> " + String(currentRoute) + "</p>"
    "<p><b>ADC Raw:</b> " + String(adcRaw) + "</p>"
    "<p><b>Voltage:</b> " + String(voltage, 4) + " V</p>"
    "<h3>Serial Monitor</h3><pre id='log'></pre>"
    "</body></html>";
  server.send(200, "text/html", html);
}

// === Arduino Setup ===
void setup() {
  Serial.begin(115200);

  // Route control setup
  pinMode(ROUTE1_PIN, OUTPUT);
  pinMode(ROUTE2_PIN, OUTPUT);
  pinMode(ROUTE3_PIN, OUTPUT);
  disableAllRoutes();
  enableRoute(1);

  // SPI initialization
  pinMode(CS_PIN, OUTPUT);
  digitalWrite(CS_PIN, HIGH);
  SPI.begin(SPI_SCK, SPI_MISO, SPI_MOSI);
  SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
  configureADC();

  // WiFi initialization
  WiFi.begin(ssid, password);
  Serial.print("Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500); Serial.print(".");
  }
  Serial.println("\nWiFi connected, IP address: " + WiFi.localIP().toString());
  addLogLine("WiFi connected: " + WiFi.localIP().toString());

  // Web server routes
  server.on("/", handleRoot);
  server.on("/log", handleLog);
  server.begin();
  Serial.println("Web server started");
  addLogLine("Web server started");
}

// === Arduino Main Loop ===
void loop() {
  unsigned long now = millis();
  server.handleClient();

  // Route switching every 20 seconds
  if (now - lastRouteSwitch >= 20000) {
    currentRoute++;
    if (currentRoute > 3) currentRoute = 1;
    disableAllRoutes();
    enableRoute(currentRoute);

    String routeMsg = "Switched to ROUTE " + String(currentRoute);
    Serial.println(routeMsg);
    addLogLine(routeMsg);

    lastRouteSwitch = now;
  }

  // Read ADC every 1 second (UNCHANGED)
  if (now - lastADCRead >= 1000) {
    uint16_t adcRaw = readMAX1032();
    float voltage = ((adcRaw / 16383.0) - 0.5) * (3 * V_REF);

    String adcMsg = "ADC Raw: " + String(adcRaw) +
                    " | Voltage: " + String(voltage, 4) +
                    " V | Active Route: " + String(currentRoute);
    Serial.println(adcMsg);
    addLogLine(adcMsg);

    lastADCRead = now;
  }
}

// === Route Control ===
void enableRoute(int route) {
  digitalWrite(ROUTE1_PIN, route == 1 ? HIGH : LOW);
  digitalWrite(ROUTE2_PIN, route == 2 ? HIGH : LOW);
  digitalWrite(ROUTE3_PIN, route == 3 ? HIGH : LOW);
}

void disableAllRoutes() {
  digitalWrite(ROUTE1_PIN, LOW);
  digitalWrite(ROUTE2_PIN, LOW);
  digitalWrite(ROUTE3_PIN, LOW);
}

// === ADC Configuration ===
void configureADC() {
  digitalWrite(CS_PIN, LOW);
  SPI.transfer(MODE_CONTROL_BYTE);
  digitalWrite(CS_PIN, HIGH);
  delayMicroseconds(10);

  digitalWrite(CS_PIN, LOW);
  SPI.transfer(ADC_RANGE_BYTE);
  digitalWrite(CS_PIN, HIGH);
  delayMicroseconds(100);
}

uint16_t readMAX1032() {
  uint8_t response[3] = {0};
  digitalWrite(CS_PIN, LOW);
  SPI.transfer(MODE_CONTROL_BYTE);
  response[0] = SPI.transfer(0x00);
  response[1] = SPI.transfer(0x00);
  response[2] = SPI.transfer(0x00);
  digitalWrite(CS_PIN, HIGH);
  return (((response[1] << 8) | response[2]) >> 2) & 0x3FFF;
}
