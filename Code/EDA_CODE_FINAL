#include <SPI.h>
#include <WiFi.h>
#include <WebServer.h>
#include <ArduinoJson.h>       


// === WiFi ===
const char* ssid = "Etherium";
const char* password = "ladylink";
WebServer server(80);

// === Pins ===
#define GAIN1_PIN 18
#define GAIN2_PIN 17
#define GAIN3_PIN 9
#define CS_PIN     8
#define SPI_SCK    36
#define SPI_MOSI   35
#define SPI_MISO   37

// === Constants ===
#define V_REF       4.098
#define MAX_ADC     16383
#define FEEDBACK_CAP 1e-10
#define GAIN_1_MULTIPLIER 3.9
#define GAIN_2_MULTIPLIER 15.0
#define GAIN_3_MULTIPLIER 47.0
#define ADC_RANGE_BYTE    0b10000100
#define MODE_CONTROL_BYTE 0b10000000

// Thresholds in gain 1 terms
#define R3_MIN 7738
#define R3_MAX 8645
#define R2_MIN_NEG 6770
#define R2_MAX_NEG 7737
#define R2_MIN_POS 8646
#define R2_MAX_POS 9613
#define GAIN2_TO_GAIN3_MIN 6447
#define GAIN2_TO_GAIN3_MAX 9936

// === Sampling Control ===
unsigned long lastSampleTime = 0;
const unsigned long sampleInterval = 50;  // in milliseconds (adjust as needed)

/// === Globals ===
bool manualGain = true;  // Force manual gain for physical testing
int activeGain = 1;
uint16_t adcRaw = 0;
float voltage = 0.0, charge = 0.0;
String gainLabel = "Gain 1 (3.9x)";
String chargeStr = "";
String chargeSign = "";
float testVoltage = 4.5;
bool testMode = false;  // <-- Disable test mode for physical testing
bool clippingWarning = false;

// === Serial Log ===
// === Serial Log ===
constexpr uint16_t LOG_DEPTH = 256;   // enough for 10 s @ 20 Hz (sampleInterval = 50 ms)
String logBuf[LOG_DEPTH];
uint16_t logHead = 0;

void addLogLine(const String& ln) {
  logBuf[logHead] = ln;
  logHead = (logHead + 1) % LOG_DEPTH;
}

void handleLog() {
  String out;
  for (uint16_t i = 0; i < LOG_DEPTH; ++i) {
    uint16_t idx = (logHead + i) % LOG_DEPTH;
    if (logBuf[idx].length()) out += logBuf[idx] + "\n";
  }
  server.send(200, "text/plain", out);
}

void setGain(int g) {
  digitalWrite(GAIN1_PIN, LOW);
  digitalWrite(GAIN2_PIN, LOW);
  digitalWrite(GAIN3_PIN, LOW);
  delayMicroseconds(1);
  if (g == 1) digitalWrite(GAIN1_PIN, HIGH);
  else if (g == 2) digitalWrite(GAIN2_PIN, HIGH);
  else if (g == 3) digitalWrite(GAIN3_PIN, HIGH);
  activeGain = g;
  gainLabel = (g == 1) ? "Gain 1 (3.9x)" : (g == 2) ? "Gain 2 (15x)" : "Gain 3 (47x)";
}

void configureADC() {
  digitalWrite(CS_PIN, LOW);
  SPI.transfer(MODE_CONTROL_BYTE);
  digitalWrite(CS_PIN, HIGH);
  delayMicroseconds(10);
  digitalWrite(CS_PIN, LOW);
  SPI.transfer(ADC_RANGE_BYTE);
  digitalWrite(CS_PIN, HIGH);
  delayMicroseconds(100);
}

uint16_t readMAX1032() {
  uint8_t r[3] = {0};
  SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
  digitalWrite(CS_PIN, LOW);
  SPI.transfer(MODE_CONTROL_BYTE);
  r[0] = SPI.transfer(0x00);
  r[1] = SPI.transfer(0x00);
  r[2] = SPI.transfer(0x00);
  digitalWrite(CS_PIN, HIGH);
  SPI.endTransaction();
  return (((r[1] << 8) | r[2]) >> 2) & 0x3FFF;
}

void calculateDerivedValues() {
  // --- Step 1: read ADC with whatever gain is currently active ---
  adcRaw = readMAX1032();

  // --- Step 2: convert to voltage referenced to virtual-ground ---
  float voltageGain = ((adcRaw / 16383.0) - 0.5) * (3 * V_REF);

  // --- Step 3: convert to charge (pC/fC string built too) ----------
  float gainFactor = (activeGain == 1) ? GAIN_1_MULTIPLIER :
                     (activeGain == 2) ? GAIN_2_MULTIPLIER : GAIN_3_MULTIPLIER;

  charge = (voltageGain / gainFactor) * FEEDBACK_CAP;
  chargeSign = (voltageGain >= 0) ? "+" : "-";

  float absCharge = abs(charge);
  chargeStr = (absCharge >= 1e-12)
                ? chargeSign + String(absCharge * 1e12, 4) + " pC"
                : chargeSign + String(absCharge * 1e15, 4) + " fC";

  // --- Step 4: clip warning for ± thresholds ----------------------
  voltage = voltageGain;
  clippingWarning = (voltage > 4.8 || voltage < -3.8);

  // --- Step 5: log to serial + circular buffer --------------------
  String log = "ADC Bits: " + String(adcRaw) +
               " | Voltage: " + String(voltage, 4) + " V" +
               " | Charge: "  + chargeStr +
               " | Gain: "    + gainLabel;
  Serial.println(log);
  addLogLine(log);
}


// === Particle Estimates ===
String particleEstimate(float q, String t) {
  float minS, maxS;
  if (t == "Volcanic Ash") { minS = 1e-6; maxS = 1e-5; }
  else if (t == "Wildfire Smoke") { minS = 1e-8; maxS = 1e-6; }
  else if (t == "Mineral Dust") { minS = 7.7e-7; maxS = 2.34e-6; }
  else return "";

  float dMin = 2 * sqrt(abs(q) / (4 * PI * maxS));
  float dMax = 2 * sqrt(abs(q) / (4 * PI * minS));
  return String(t) + ": " + String(dMin * 1e6, 2) + "-" + String(dMax * 1e6, 2) + " &micro;m";
}

void handleMain() {
  calculateDerivedValues();
  String page = "<!DOCTYPE html><html><head><title>Dust Analyzer</title>";
  page += "<meta name='viewport' content='width=device-width, initial-scale=1.0'>";
  page += "<style>";

  // Body layout
  page += "body{margin:0;padding:0;font-family:monospace;background:#A1A6A8;";
  page += "display:flex;justify-content:center;align-items:center;height:100vh;}";

  // Background image wrapper
  page += ".bg-wrapper{position:relative;width:90vw;max-width:1400px;aspect-ratio:768/877;";
  page += "background-image:url('https://github.com/NathanTruong0930/COATL-AIRCRAFT/blob/main/Code/Volcano2.png?raw=true');";
  page += "background-repeat:no-repeat;background-size:contain;background-position:center;";
  page += "display:flex;align-items:center;justify-content:center;font-size:0;}";

  // Transparent overlay box with transparent border
  page += ".overlay-text{position:absolute;top:54%;left:50%;transform:translateX(-50%);";
  page += "width:35%;padding:1em 1.5em;background-color:transparent;";
page += "border:2px solid transparent;text-align:center;font-size:1.2vw;line-height:1.5;";
page += "font-family:monospace;color:black;box-sizing:border-box;border-radius:4px;";
page += "white-space:normal;}";

  // Heading and text
  page += ".overlay-text h1{font-size:1.4em;margin:0 0 0.5em -0.3em;}";
  page += ".overlay-text p{font-size:1em;margin:0.6em 0;}";

  // Button (monospace, moved up slightly)
  page += ".overlay-text button{font-family:monospace;font-size:1em;padding:0.4em 1.2em;";
  page += "background:#E87749;color:black;border:none;cursor:pointer;margin-top:0.4em;";
  page += "border-radius:6px;box-shadow:inset 0 0 0 1px #cc5e32;}";

  page += "</style></head><body>";
  page += "<div class='bg-wrapper'>";
  page += "<div class='overlay-text'>";

page += "<h1>Electrostatic Dust Analyzer</h1>";

/* ---------- live-updating values ---------- */
page += "<p><b>Charge:</b> <span id='chg'>--</span></p>";

page += "<p><b>Particle Size Estimates:</b></p>";
page += "<p id='ash'   ></p>";
page += "<p id='fire'  ></p>";
page += "<p id='dust'  ></p>";

page += "<p id='clipWarn' style='color:red;display:none'><b>⚠️ Clipping risk!</b></p>";

page += "<form action='/details'><button>Technical Details</button></form>";
page += "</div></div>";

/* ---------- JS updater (add just before </body>) ---------- */
page += "<script>";
page += "function updVals(){fetch('/data').then(r=>r.json()).then(d=>{";
page += "document.getElementById('chg').textContent = d.charge;";
page += "document.getElementById('ash').innerHTML  = d.ash;";
page += "document.getElementById('fire').innerHTML = d.fire;";
page += "document.getElementById('dust').innerHTML = d.dust;";

page += "document.getElementById('clipWarn').style.display = d.clip?'':'none';";
page += "});}";
page += "setInterval(updVals,1000); updVals();";
page += "</script>";

page += "</body></html>";


  server.send(200, "text/html", page);
}



void handleDetails() {
  calculateDerivedValues();

  String page = "<html><head><meta charset='UTF-8'><title>Details</title>"
                "<meta name='viewport' content='width=device-width, initial-scale=1.0'>"
                "<style>"
                "body{background:#A1A6A8;color:black;font-family:monospace;padding:20px;}"
                "button{background:#E87749;color:black;font-family:monospace;padding:10px;border:none;cursor:pointer;}"
                ".radio-group{display:flex;gap:10px;margin-top:10px;}"
                "input[type=radio]{display:none;}"
                "label{padding:6px 12px;border:1px solid black;border-radius:5px;cursor:pointer;}"
                "input[type=radio]:checked+label{background:#E87749;color:black;}"
                "</style>"
                "<script src='https://cdn.jsdelivr.net/npm/chart.js'></script>"
                "</head><body>";

  page += "<a href='/' style='text-decoration:none;color:black;font-weight:bold;font-size:18px;'>&#8592; Main Page</a>";

  /* ---- live-value placeholders ---- */
  page += "<p><b>Charge:</b>   <span id='chg'>--</span></p>"
          "<p><b>Voltage:</b>  <span id='volt'>--</span> V</p>"
          "<p><b>ADC Bits:</b> <span id='bits'>--</span></p>"
          "<p><b>Gain Stage:</b> <span id='glabel'>--</span></p>"
          "<p id='clipWarn' style='color:red;display:none'><b>⚠️ Clipping risk!</b></p>";

  /* ---- gain toggle & radios ---- */
  page += "<form method='POST' action='/toggleGain'><button>Toggle "
          + String(manualGain ? "Auto" : "Manual") + " Gain</button></form>";

  if (manualGain) {
      page += "<div class='radio-group'>";
      for (int g = 1; g <= 3; g++) {
          String id  = "gain" + String(g);
          String lbl = (g==1) ? "Gain 1 (3.9x)" : (g==2) ? "Gain 2 (15x)" : "Gain 3 (47x)";
          String ck  = (activeGain==g) ? "checked" : "";
          page += "<input type='radio' id='"+id+"' name='gain' value='"+String(g)+"' "+ck+">";
          page += "<label for='"+id+"'>"+lbl+"</label>";
      }
      page += "<button onclick='applyGain()'>Apply Gain</button></div>";
  }

  /* ---- serial monitor & chart ---- */
  page += "<h3>Serial Monitor (last 10 s)</h3>"
          "<pre id='log' style='background:#000;color:#0f0;padding:8px;height:300px;overflow-y:scroll;"
          "font-family:monospace;width:100%;'></pre>"

          "<h3>Live Charge Plot</h3>"
          "<canvas id='chargePlot' style='width:100%;height:300px;background:white;'></canvas>";

  /* ---- JavaScript ---- */
  page += "<script>"
  "let chargeData=[],chargeLabels=[],chart;"
  "function parseCharge(l){const m=l.match(/Charge:\\s+([+-]?[0-9.]+)\\s+(pC|fC)/i);"
  "if(!m)return null;let v=parseFloat(m[1]);if(m[2]==='fC')v/=1000;return v;}"
  "function initChart(){const ctx=document.getElementById('chargePlot').getContext('2d');"
  "chart=new Chart(ctx,{type:'line',data:{labels:chargeLabels,datasets:[{label:'Charge (pC)',"
  "data:chargeData,borderColor:'#E87749',backgroundColor:'rgba(0,0,0,0)',tension:0.2}]},"
  "options:{responsive:true,animation:false,scales:{x:{title:{display:true,text:'Sample'}},"
  "y:{title:{display:true,text:'Charge (pC)'}}}}});}"
  "const ring=[],maxLn=200;"                               /* 10 s @ 20 Hz */
  "function pushLine(t){ring.push(t);if(ring.length>maxLn)ring.shift();"
  "const v=parseCharge(t);if(v!==null){chargeData.push(v);if(chargeData.length>maxLn)chargeData.shift();"
  "chargeLabels.push('');if(chargeLabels.length>maxLn)chargeLabels.shift();chart.update();}"
  "document.getElementById('log').textContent=ring.join('\\n');}"
  "function poll(){fetch('/last').then(r=>r.text()).then(t=>{if(t.trim().length)pushLine(t.trim());});}"
  "function updVals(){fetch('/data').then(r=>r.json()).then(d=>{"
  "document.getElementById('chg').textContent=d.charge;"
  "document.getElementById('volt').textContent=d.voltage;"
  "document.getElementById('bits').textContent=d.adcBits;"
  "document.getElementById('glabel').textContent=d.gain;"
  "document.getElementById('clipWarn').style.display=d.clip?'':'none';});}"
  "window.onload=()=>{initChart();setInterval(poll,100);setInterval(updVals,1000);poll();updVals();};"
  "function applyGain(){const s=document.querySelector('input[name=\"gain\"]:checked');"
  "if(s)fetch('/selectGain',{method:'POST',headers:{'Content-Type':'application/x-www-form-urlencoded'},body:'gain='+s.value});}"
  "</script></body></html>";

  server.send(200, "text/html", page);
}



void handleToggleGain() {
  manualGain = !manualGain;         
  server.sendHeader("Location", "/details");
  server.send(303);
}


void handleSelectGain() {
  if (server.hasArg("gain")) {
    int g = server.arg("gain").toInt();
    if (g >= 1 && g <= 3) setGain(g);
  }
  server.sendHeader("Location", "/details");
  server.send(303);
}

void handleSummary() {
  calculateDerivedValues();  
  String summary = 
    "<p><b>Charge:</b> " + chargeStr + "</p>" +
    "<p><b>Particle Size Estimates:</b></p>" +
    "<p>" + particleEstimate(charge, "Volcanic Ash") + "</p>" +
    "<p>" + particleEstimate(charge, "Wildfire Smoke") + "</p>" +
    "<p>" + particleEstimate(charge, "Mineral Dust") + "</p>";
  server.send(200, "text/html", summary);
}

void handleData() {
  StaticJsonDocument<256> doc;
  doc["charge"] = chargeStr;
  doc["voltage"] = String(voltage,4);
  doc["adcBits"] = adcRaw;
  doc["gain"]   = gainLabel;
  doc["clip"]   = clippingWarning;
  doc["ash"]    = particleEstimate(charge, "Volcanic Ash");
  doc["fire"]   = particleEstimate(charge, "Wildfire Smoke");
  doc["dust"]   = particleEstimate(charge, "Mineral Dust");
  server.send(200, "application/json", doc.as<String>());
}

// --- return only the newest log line ---
void handleLast() {
  String out = logBuf[(logHead + LOG_DEPTH - 1) % LOG_DEPTH];
  server.send(200, "text/plain", out);
}

void setup() {
  Serial.begin(115200);
  pinMode(CS_PIN, OUTPUT); digitalWrite(CS_PIN, HIGH);
  pinMode(GAIN1_PIN, OUTPUT); pinMode(GAIN2_PIN, OUTPUT); pinMode(GAIN3_PIN, OUTPUT);
  setGain(1);
  SPI.begin(SPI_SCK, SPI_MISO, SPI_MOSI);
  configureADC();

  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) { delay(500); Serial.print("."); }
  Serial.println("\nWiFi connected. IP: " + WiFi.localIP().toString());

    server.on("/", handleMain);
  server.on("/summary", handleSummary);
  server.on("/details", handleDetails);
  server.on("/log", handleLog);      // (manual download)
  server.on("/last", handleLast);    // <-- new lightweight endpoint
  server.on("/data", handleData);
  server.on("/toggleGain", HTTP_POST, handleToggleGain);
  server.on("/selectGain", HTTP_POST, handleSelectGain);

  server.begin();
}

void loop() {
  server.handleClient();

  unsigned long now = millis();
  if (now - lastSampleTime >= sampleInterval) {
    calculateDerivedValues();  // New reading from ADC
    lastSampleTime = now;
  }
}
